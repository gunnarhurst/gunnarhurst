name: Update Language Table (LOC Ratio - Core Stack Only)

on:
  schedule:
    - cron: "0 12 * * *"   # 7:00 AM America/Chicago
  workflow_dispatch:

permissions:
  contents: write

jobs:
  loc:
    runs-on: ubuntu-latest
    env:
      OWNER: gunnarhurst            
    steps:
      - uses: actions/checkout@v4

      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y cloc jq

      - name: Fetch repo list via REST (owner repos, public+private)
        env:
          PAT: ${{ secrets.GH_PRIVATE_TOKEN }}
        run: |
          set -e
          mkdir -p repos
          echo "[]" > repos.json
          # Fetch up to 300 repos (3 pages x 100)
          for page in 1 2 3; do
            curl -s -H "Authorization: token $PAT" \
                 "https://api.github.com/user/repos?per_page=100&page=${page}&type=owner&sort=pushed" \
                 > page.json
            jq -s '.[0] + .[1]' repos.json page.json > tmp.json && mv tmp.json repos.json
            if [ "$(jq 'length' page.json)" -lt 100 ]; then
              break
            fi
          done
          # Keep only non-fork, non-archived repos owned by $OWNER
          jq --arg OWNER "$OWNER" '
            [ .[]
              | select(.owner.login == $OWNER)
              | select((.fork | not) and (.archived | not))
              | {name: .name, full_name: .full_name}
            ]' repos.json > names.json

      - name: Clone selected repos (limit to 25 most-recent)
        env:
          PAT: ${{ secrets.GH_PRIVATE_TOKEN }}
        run: |
          set -e
          mkdir -p repos
          jq -r '.[].full_name' names.json | head -n 25 | while read -r FULL; do
            echo "Cloning $FULL"
            REPO_NAME="$(basename "$FULL")"
            git clone --depth 1 "https://${PAT}:x-oauth-basic@github.com/${FULL}.git" "repos/${REPO_NAME}" || true
          done

      - name: Run CLOC across repos
        run: |
          # Exclude common build/vendor dirs; adjust if needed
          cloc repos \
            --json --quiet \
            --exclude-dir=node_modules,dist,build,bin,obj,.git,coverage,.next,out \
            > cloc.json || echo '{"header":{},"SUM":{"code":0}}' > cloc.json
          head -n 40 cloc.json || true

      - name: Build LOC ratio table (core stack only) and update README
        run: |
          cat > build.js <<'NODE'
          const fs = require('fs');

          const cloc = JSON.parse(fs.readFileSync('cloc.json','utf8'));

          // Map cloc language names into core buckets we care about
          function bucketName(lang) {
            const t = lang.toLowerCase();
            // order matters to avoid "java" matching "javascript"
            if (t.includes('javascript') || t === 'jsx' || t.includes('javascript jsx')) return 'JavaScript';
            if (t.includes('typescript') || t === 'tsx' || t.includes('typescript jsx')) return 'TypeScript';
            if (t === 'java') return 'Java';
            if (t === 'c#' || t.includes('c#')) return 'C#';
            if (t === 'sql' || t.includes('pl/sql') || t.includes('tsql') || t.includes('plsql')) return 'SQL';
            return null; // everything else is ignored (shell, yaml, json, markdown, xml, etc.)
          }

          // Aggregate LOC into buckets
          const buckets = new Map([['Java',0],['TypeScript',0],['JavaScript',0],['SQL',0],['C#',0]]);
          for (const [lang, stats] of Object.entries(cloc)) {
            if (!stats || typeof stats.code !== 'number') continue;
            if (lang === 'header' || lang === 'SUM') continue;
            const b = bucketName(lang);
            if (b && buckets.has(b)) buckets.set(b, buckets.get(b) + stats.code);
          }

          // Remove zero buckets
          const entries = Array.from(buckets.entries()).filter(([,loc]) => loc > 0);
          const total = entries.reduce((a,[,loc]) => a + loc, 0);

          // Sort by LOC desc, keep top 5 (or all if fewer)
          entries.sort((a,b) => b[1] - a[1]);

          // Build clean table (no bar)
          let table = `\n\n| Lang | % | LOC |\n|---|---:|---:|\n`;
          for (const [name, loc] of entries) {
            const pct = total ? (loc/total*100) : 0;
            const emoji =
              name === 'Java' ? '‚òïÔ∏è' :
              name === 'TypeScript' ? 'üî∑' :
              name === 'JavaScript' ? 'üü®' :
              name === 'SQL' ? 'üóÑÔ∏è' :
              name === 'C#' ? 'üü£' : 'üì¶';
            table += `| ${emoji} ${name} | ${pct.toFixed(1)}% | ${loc.toLocaleString()} |\n`;
          }
          if (!entries.length) table += `| (no core stack code measured yet) | 0% | 0 |\n`;

          // Inject into README between markers
          const readmePath = 'README.md';
          const md = fs.existsSync(readmePath) ? fs.readFileSync(readmePath,'utf8') : '';
          const start = '<!--LANG_TABLE_START-->';
          const end = '<!--LANG_TABLE_END-->';
          const startIdx = md.indexOf(start);
          const endIdx = md.indexOf(end);
          if (startIdx === -1 || endIdx === -1 || endIdx < startIdx) {
            console.error('Markers not found in README.md. Add:\n<!--LANG_TABLE_START-->\n<!--LANG_TABLE_END-->');
            process.exit(1);
          }
          const before = md.slice(0, startIdx + start.length);
          const after  = md.slice(endIdx);
          fs.writeFileSync(readmePath, before + table + '\n' + after);
          console.log('README updated with core stack LOC table.');
          NODE

          node build.js

      - name: Commit updated README
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add README.md
          git commit -m "docs: update core-stack LOC language table" || echo "No changes"
          git push
